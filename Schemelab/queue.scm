(define (make-queue)
	(let ((body (cons '() '())))
		(define (empty?)
			(and (eq? (car body) '()) (eq? (cdr body) '())))
		(define (only-one-element?)
			(and (not (empty?)) (eq? (cdar body) '())))
		(define (insert! new)
			(let ((new-cons (cons new '())))
				(if (empty?)
					((lambda ()
						(set-car! body new-cons)
						(set-cdr! body new-cons)))
					(let ((last (cdr body)))
						(set-cdr! last new-cons)
						(set-cdr! body new-cons)))))
		(define (delete!)
			(cond
				((empty?)
					'())
				((only-one-element?)
					(let ((result (car body)))
						(set-car! body '())
						(set-cdr! body '())
						(car result)))
				(else
					(let ((result (car body)))
						(set-car! body (cdr result))
						(car result)))))
		(define (dispacher sym oprand)
			(cond
				((eq? sym 'empty?) (empty?))
				((eq? sym 'insert!) (insert! oprand))
				((eq? sym 'delete!) (delete!))))
		dispacher))

(define (empty? queue) (queue 'empty? 0))
(define (insert! queue oprand) (queue 'insert! oprand))
(define (delete! queue) (queue 'delete! 0)
