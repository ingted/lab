(load "2.7.scm")

(define (mul-interval x y)
 (let ((p1 (< 0 (lower-bound x)))
	   (p2 (< 0 (upper-bound x)))
	   (p3 (< 0 (lower-bound y)))
	   (p4 (< 0 (upper-bound y))))
  (cond ((and p1 p2 p3 p4)
		 (make-interval (* (lower-bound x) (lower-bound y))
		                (* (upper-bound x) (upper-bound y))))
        ((and (not p1) p2 p3 p4)
		 (make-interval (* (lower-bound x) (upper-bound y))
		                (* (upper-bound x) (upper-bound y))))
		((and (not p1) (not p2) p3 p4)
		 (make-interval (* (lower-bound x) (upper-bound y))
		                (* (upper-bound x) (lower-bound y))))
		((and (not p1) (not p2) (not p3) p4)
		 (make-interval (* (lower-bound x) (upper-bound y))
		                (* (lower-bound x) (lower-bound y))))
		((and (not p1) (not p2) (not p3) (not p4))
		 (make-interval (* (upper-bound x) (upper-bound y))
		                (* (lower-bound x) (lower-bound y))))
		((and (not p1) p2 (not p3) (not p4))
		 (make-interval (* (upper-bound x) (lower-bound y))
		                (* (lower-bound x) (lower-bound y))))
		((and p1 p2 (not p3) (not p4))
		 (make-interval (* (upper-bound x) (lower-bound y))
		                (* (lower-bound x) (upper-bound y))))
		((and p1 p2 (not p3) p4)
		 (make-interval (* (upper-bound x) (lower-bound y))
		                (* (upper-bound x) (upper-bound y))))
		((and (not p1) p2 (not p3) p4)
		 (make-interval (min (* (lower-bound x) (upper-bound y))
						     (* (upper-bound x) (lower-bound y)))
		                (max (* (lower-bound x) (lower-bound y))
						     (* (upper-bound x) (upper-bound y))))))))
